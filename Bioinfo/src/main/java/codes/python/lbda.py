import sys
import math

def score(char1, char2):
    if char1 == char2:
        return 1
    else:
        return -1

def needleman_wunsch_reconstruct(seq1, seq2, match_score, mismatch_penalty, gap_penalty):
    score_matrix = [[0 for _ in range(len(seq2) + 1)] for _ in range(len(seq1) + 1)]
    for i in range(len(seq1) + 1):
        score_matrix[i][0] = gap_penalty * i
    for j in range(len(seq2) + 1):
        score_matrix[0][j] = gap_penalty * j
    for i in range(1, len(seq1) + 1):
        for j in range(1, len(seq2) + 1):
            match_score_ij = score_matrix[i - 1][j - 1] + score(seq1[i - 1], seq2[j - 1])
            delete_seq1_ij = score_matrix[i - 1][j] + gap_penalty
            delete_seq2_ij = score_matrix[i][j - 1] + gap_penalty
            score_matrix[i][j] = max(match_score_ij, delete_seq1_ij, delete_seq2_ij)
    return score_matrix[len(seq1)][len(seq2)]

def calculate_lambda(sequences, match_score, mismatch_penalty, gap_penalty):
    # Calcula o valor de lambda usando as sequências do banco de dados
    num_sequences = len(sequences)
    sum_scores = 0
    
    for i in range(num_sequences):
        for j in range(i + 1, num_sequences):
            score = needleman_wunsch_reconstruct(sequences[i], sequences[j], match_score, mismatch_penalty, gap_penalty)
            sum_scores += score
    
    # Calcula lambda usando a média dos scores
    lambda_value = 0.1  # Valor inicial para lambda (pode ser ajustado)
    if num_sequences > 1:
        mean_score = sum_scores / (num_sequences * (num_sequences - 1) / 2)
        lambda_value = -math.log(mean_score / (len(sequences[0]) * len(sequences[1])))

    return lambda_value

# Sequências do banco de dados
sequences = [
    "TGGCTCCTCGGAAACCCAATGTGCGACGAATTCATCAGCGTGCCGGAATGGTCTTACATAGTGGAGAGGGCTAATCCAGCTAATGACCTCTGTTACCCAGGGAGCCTCAATGACTATGAAGAACTGAAACACCTATTGAGCAGAATAAATCATTTTGAGAAGATTCTGATCATCCCCAAGAGTTCTTGGCCCAATCATGAAACATCATTAGGGGTGAGCGCAGCTTGTCCATACCAGGGAACACCCTCCTTTTTCAGAAATGTGGTGTGGCTTATCAAAAAGAACGATGCATACCCAACAATAAAGATAAGCTACAATAACACCAATCGGGAAGATCTTTTGATACTGTGGGGGATTCATCATTCCAACAATGCAGAAGAGCAGATAAATCTCTATAAAAACCCAACCACCTATATTTCAGTTGGAACATCAACTTTAAACCAGAGATTGGTACCAAAAATAGCTACCAGATCCCAAGTAAACGGG",
    "AGACGTCAGGAACGACGACAATCTTCGCAGGACACCTGAAATGTAGACTAAAAATGGATAAACTGACTTTAAAAGGGGTGTCATATGTGATGTGCACAGGCTCATTCAAGCTAGAGAAGGAAGTGGCTGAGACCCAGCATGGAACTGTCCTAGTGCAGGTTAAATATGAAGGAACAGATGCACCATGCAAGATTCCAATTTCAACCCAAGATGAGAAAGGAGTGACCCAGAATGGGAGATTGATAACAGCCAATCCCATAGTTACTGACAAAGAAAAACCAGTCAACATTGAAACAGAACCACCCTTCGGCGAGAGCTACATCGTGATAGGGGCAGGTGAAAAAGCTTTGAAACTAAGCTGGTTCAAGAAAGGAAGCAGCATAGGGAAAATGTTCGAAGCCACCGCCCGAGGAGCACGAAGGATGGCTATCCTGGGAGACACAGCCTGGGACTTTGGA",
    "ACAAAGTTCACACCAGTTGAAAATCCTAATTGTAGAGGCACATTGGTGCCACATGCATTACGGGAAGCATGAGCACCCTCAACATCGAAGCCTATCCAGCTTCGAACTTGCCTTACAGCCTCTTCACGACGAGCTAATATGAGTGAAGCGAAGATTCTACACATATTAGGCATAGCTCTATCACACTTAGGATTTTCAACTGGTGTGAACTTTGTTGTTCAGCCAGTTGGTGTTGTAGACACTCCTTAAACGGCAATGTTTCCACTGTTTTCGTGCCTGCAACGCGCGATTCAGTTCCTCTTCACATAATCGCCCCGAGCTCGCTTATCGTTTAAGCAGCTCTGCGCTACTATGAGTCCCGTGTAGAGGCTAATCCATTAGTCTCTCTTTGGACATATGGAAAACGAACTCCCAACACGGGAAAGTCCCTC",
    "GAAGGGGACGAGAGAGTCCCAAGCGGCCCCGAGAAGGGTCGTCCGCGGGATTCAGCGCCGACGGGACGTAAACAAAGGACGTCCCGCGCAGGATCCAGTTGGCAGCACAGCCTAGCAGCCATGGAAACGATGTATATTTGCGGGAGAGAACAACAGAGTTATCCGTCCCGAGAATGTTTGCTCCAGACCTGCTGCGAGCAAAACAAGCGGCTAGGAGTTCCGCAGTATGGATCGGCAGAGGAGCCAGAAAGGTTCCACGCATGCGCTGATGGCCTATGACCAAGCCCCAGCCAGTGGGGGTTGCGTCAGCAAACACTTGGCACAGACCTGGCCGTTGCCGGGCAACGGGGTAAAGGTTCAGGTATTGTTTACACAGAAAGGCCTTGTAAGTTGGCGAGAAAGTGAAAGCCTGCTTAGATTGAATACATGCATACAAGGGCATTAAAGCAGGATAACCACATTGTGTAAAAGGAGCAGCAAAACCCAAAG",
    "CATGCTCAAAGTGCGTATACCTGTGCAAGCACCAATGCAGACACAAGTGCAAGCACCAATGCAGACACAAGTGCAAGCACCAATGCAAGCATAAATGCAGATACCAATGTAGATACTTGTGCAAGCACCAATGCAAGCACAAATGTAGACACCAATGCAAGCATAAATGCAAGCACCAATGCAAGCACAAATGTAGACACCAATGCAAGCACCAATGCAAGCATAAATGCAGATACCAATGTAGATACTTGTGCAAGCACCAATGCAAGCACAAATGTAGACACCAATGCAAGCATAAATGCAAGCACCAATGCAAGCACAAATGTAGACACCAATGCAGACATCAATGCAAACACCAATGCAGACATCAATGCAAACATCAATGCAAACACAGAATACACCGATTTAACAGATCCTGAGCGCA",
    "TAAGACCCAAAGTGAGGGGGCCTGAGACTGGACCCTACTACTATTCTCTCGTTTAAACGAGAGAAGAGAGCGGCGAGAGCAGACTCCGAATATCCCCAAAGTCAAGGGAAAGGAAGGGGGCCCTTAGCATGGGAGGCGCGGCGACGAGCGGGATAGCAGGACGGGGGGCTGGCGAAGATTCCCAACCGGGGGATCGCTGAATCTAGTATGAAGGCTGGCAAAGATCCCCAGTGGAGCGAAGCTAGTGCAGGGGGCTCGGCATTCCTAGGAGAAGGAGCCTCGCCTTGAGGGCAAAGACCCCCCCAAGCCTCTCATCAGAATCTCAACCGATTTCGTCAGCCGCTTCAGACAGCCGCGGTTGTCATCATCATCGGGAAAGGCGGTGGGATCATGAAGCCCCCAGGGGAGCGTGGCCCGTGGATCTGTGAAACTCACAGTTTATTTTCTCCAAATCGCTCCTTGCAACAATGGACACGCAAGGGCGAAT",
    "AGACCAGGACAATTTGGCGATATCCAAAGTCGCACACCTGAGAGCGAAGACGTCTATGCTAATACACAACTGGTACTGCAGAGACCGGCTGCGGGTACGGTACACGTGCCATACTCTCAGGCACCATCTGGCTTTAAGTATTGGCTAAAAGAACGCGGGGCGTCACTGCAGCACACAGCACCATTCGGCTGCCAAATAGCAACAAACCCGGTAAGAGCGGTGAACTGCGCCGTAGGGAACATGCCCATCTCCATCGACATACCGGAAGCGGCCTTCACTAGGGTCGTCGACGCGCCCTCTTTAACGGACATGTCGTGCGAGGTACCAGCCTGCACCCATTCCTCAGACTTTGGGGGCGTCGCCGTTATTAAATATGCAGCCAGTAAGAAAGGCAAGTGCGCGGTGCATTCGATGACTAACGCCGTCACTATTCGGGAAGCTGAGATAGAAGTTGAAGGGAATTCTCAGCTGCAAATCTCTTTCTCGA",
    "CCATCATAGTGCTGGTGTATGGGCACAACACTTTTATACAAAAGGCTCCTGGTCTTTTTTCAAGCCAATCCCCCACCATGGAGAGGACTCTGAGCGTCCGTGCTTCTTCCACTTCAGGACTAGATGATGACTCACCTATGTCACACAGCAACGTGTCACACGGCTCAGCCGCCATATGAAAGACGTCCACCCCACTCTTAAGACGGACTATGTTCCACCCATAGCTTTGCACCAACACGGGTTCTTCATGACCAGGGCCTCCTTTTGTGTATCCTTTCACTTCTTGAACTTTGCGGATGGTGGCGGCGTAGTAACTCCAGCCCCCTCTGCCACATCCAAGATCAATGACCTTTCCATAGGGCTGCAGGTATCCCCGCTCCACCAACCATCTCAGCTTTGCACTTCCTCGGGACACAGCATGGCCTCCTGTGGCCACTCCCGT",
    "CCCACCGGTCCGCCTTTTTTGCACGGGTAAGCACCTTGGGTGGGCGGAGGAGGGGGGGACGCGGGGGCGGAGGAGGGGGGACGCGGGGGCGGAGGAGGGGGGACGCGGGGGCGGAGGAGGGGGGACGCGGGGGCGGAGGAGGGGGGACGCGGGGGCGGAGGAGGGGGCTCACCCGCGTTCGTGCCTTCCCGCAGGAGGAACGTCCTCGTCGAGGCGACCGGCGGCGACCGTTGCGTGGACCGCTTCCTGCTCGTCGGGCGGGGGGAAGCCACTGTGGTCCTCCGGGACGTTTTCTGGATGGCCGACATTTCCCCAGGCGCTTTTGCGCCTTGTGTAAAAGCGCGGCGTCCCGCTCTCCGATCCCCGCCCCTGGGCACGCGCAAGCGCAAGCGCCCTTCCCGCCCCCTCTCATCGGAGTCTGAGGTAGAATCCGATACAGCCTTGGAGTCTGAGGTCG",
    "TATGATAAGAAGCTTGTTTCGCGCATTCAAATTCGAGTTAATCCTTTGCCGAAATTTGATTCTACCGTGTGGGTGACAGTCCGCAAAGTTCCTGCCTCATCGGACTTATCCGTTACCGCCATCTCTGCTATGTTCGCGGACGGAGCCTCACCGGTACTGGTTTATCAGTATGCAGCATCCGGAGTCCAAGCCAACAATAAATTGTTGTATGATCTTTCGGCGATGCGCGCTGATATTGGTGACATGAGAAAGTACGCCGTGCTCGTGTATTCAAAAGACGATGCGCTCGAGACGGACGAATTGGTACTTCATGTTGACATTGAGCACCAACGCATTCCCACATCTGGGGTGCTCCCAGTTTGAACCTGTGTTTTCCAGAACCCTCCCTCCGATTTCTGTGGCGGGAGCTGAGTTGGTAGTGTTGCTATAAACTACCTGAAGTCACTAAACGCTATGCGGTGAACGGGTTGTCCATCCAGCTTACGGC"
]

# Parâmetros para o algoritmo de alinhamento
match_score = 1
mismatch_penalty = -1
gap_penalty = -1

# Calcula lambda
lambda_value = calculate_lambda(sequences, match_score, mismatch_penalty, gap_penalty)

print(f'Lambda: {lambda_value}')
